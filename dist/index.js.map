{
  "version": 3,
  "sources": ["../lib/seconds.json", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["{\n\t\"1\": 2678400,\n\t\"jan\": 2678400,\n\t\"january\": 2678400,\n\t\"2\": 2419200,\n\t\"feb\": 2419200,\n\t\"february\": 2419200,\n\t\"3\": 2678400,\n\t\"mar\": 2678400,\n\t\"march\": 2678400,\n\t\"4\": 2592000,\n\t\"apr\": 2592000,\n\t\"april\": 2592000,\n\t\"5\": 2678400,\n\t\"may\": 2678400,\n\t\"6\": 2592000,\n\t\"jun\": 2592000,\n\t\"june\": 2592000,\n\t\"7\": 2678400,\n\t\"jul\": 2678400,\n\t\"july\": 2678400,\n\t\"8\": 2678400,\n\t\"aug\": 2678400,\n\t\"august\": 2678400,\n\t\"9\": 2592000,\n\t\"sep\": 2592000,\n\t\"september\": 2592000,\n\t\"10\": 2678400,\n\t\"oct\": 2678400,\n\t\"october\": 2678400,\n\t\"11\": 2592000,\n\t\"nov\": 2592000,\n\t\"november\": 2592000,\n\t\"12\": 2678400,\n\t\"dec\": 2678400,\n\t\"december\": 2678400\n}\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isDateObject = require( '@stdlib/assert-is-date-object' );\nvar isString = require( '@stdlib/assert-is-string' ).isPrimitive;\nvar isInteger = require( '@stdlib/assert-is-integer' ).isPrimitive;\nvar lowercase = require( '@stdlib/string-lowercase' );\nvar isLeapYear = require( '@stdlib/assert-is-leap-year' );\nvar currentYear = require( '@stdlib/time-current-year' );\nvar format = require( '@stdlib/string-format' );\nvar SECONDS_IN_DAY = require( '@stdlib/constants-time-seconds-in-day' );\nvar SECONDS_IN_MONTH = require( './seconds.json' );\n\n\n// MAIN //\n\n/**\n* Returns the number of seconds in a month.\n*\n* @param {(string|Date|integer)} [month] - month\n* @param {integer} [year] - year\n* @throws {TypeError} first argument must be either a string, integer, or `Date` object\n* @throws {Error} must provide a recognized month\n* @throws {RangeError} an integer month argument must be on the interval `[1,12]`\n* @throws {TypeError} second argument must be an integer\n* @returns {integer} seconds in a month\n*\n* @example\n* var num = secondsInMonth();\n* // returns <number>\n*\n* @example\n* var num = secondsInMonth( 2 );\n* // returns <number>\n*\n* @example\n* var num = secondsInMonth( 2, 2016 );\n* // returns 2505600\n*\n* @example\n* var num = secondsInMonth( 2, 2017 );\n* // returns 2419200\n*/\nfunction secondsInMonth( month, year ) {\n\tvar secs;\n\tvar mon;\n\tvar yr;\n\tvar d;\n\tif ( arguments.length === 0 ) {\n\t\t// Note: cannot cache as application may cross over into a new year:\n\t\td = new Date();\n\t\tmon = d.getMonth() + 1; // zero-based\n\t\tyr = d.getFullYear();\n\t} else if ( arguments.length === 1 ) {\n\t\tif ( isDateObject( month ) ) {\n\t\t\td = month;\n\t\t\tmon = d.getMonth() + 1; // zero-based\n\t\t\tyr = d.getFullYear();\n\t\t} else if ( isString( month ) || isInteger( month ) ) {\n\t\t\t// Note: cannot cache as application may cross over into a new year:\n\t\t\tyr = currentYear();\n\t\t\tmon = month;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string, integer, or Date object. Value: `%s`.', month ) );\n\t\t}\n\t} else {\n\t\tif ( !isString( month ) && !isInteger( month ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be either a string or integer. Value: `%s`.', month ) );\n\t\t}\n\t\tif ( !isInteger( year ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an integer. Value: `%s`.', year ) );\n\t\t}\n\t\tmon = month;\n\t\tyr = year;\n\t}\n\tif ( isInteger( mon ) && (mon < 1 || mon > 12) ) {\n\t\tthrow new RangeError( format( 'invalid argument. An integer month value must be on the interval: [1, 12]. Value: `%s`.', mon ) );\n\t}\n\tmon = lowercase( mon.toString() );\n\tsecs = SECONDS_IN_MONTH[ mon ];\n\tif ( secs === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Must provide a recognized month. Value: `%s`.', mon ) );\n\t}\n\t// Check if February during a leap year...\n\tif ( secs === 2419200 && isLeapYear( yr ) ) {\n\t\tsecs += SECONDS_IN_DAY;\n\t}\n\treturn secs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = secondsInMonth;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Determine the number of seconds in a month.\n*\n* @module @stdlib/time-seconds-in-month\n*\n* @example\n* var secondsInMonth = require( '@stdlib/time-seconds-in-month' );\n*\n* var num = secondsInMonth();\n* // returns <number>\n*\n* num = secondsInMonth( 2 );\n* // returns <number>\n*\n* num = secondsInMonth( 2, 2016 );\n* // returns 2505600\n*\n* num = secondsInMonth( 2, 2017 );\n* // returns 2419200\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,CAAAA,EAAA,SACC,IAAK,QACL,IAAO,QACP,QAAW,QACX,IAAK,QACL,IAAO,QACP,SAAY,QACZ,IAAK,QACL,IAAO,QACP,MAAS,QACT,IAAK,OACL,IAAO,OACP,MAAS,OACT,IAAK,QACL,IAAO,QACP,IAAK,OACL,IAAO,OACP,KAAQ,OACR,IAAK,QACL,IAAO,QACP,KAAQ,QACR,IAAK,QACL,IAAO,QACP,OAAU,QACV,IAAK,OACL,IAAO,OACP,UAAa,OACb,KAAM,QACN,IAAO,QACP,QAAW,QACX,KAAM,OACN,IAAO,OACP,SAAY,OACZ,KAAM,QACN,IAAO,QACP,SAAY,OACb,ICpCA,IAAAC,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAe,QAAS,+BAAgC,EACxDC,EAAW,QAAS,0BAA2B,EAAE,YACjDC,EAAY,QAAS,2BAA4B,EAAE,YACnDC,EAAY,QAAS,0BAA2B,EAChDC,EAAa,QAAS,6BAA8B,EACpDC,EAAc,QAAS,2BAA4B,EACnDC,EAAS,QAAS,uBAAwB,EAC1CC,EAAiB,QAAS,uCAAwC,EAClEC,EAAmB,IAgCvB,SAASC,EAAgBC,EAAOC,EAAO,CACtC,IAAIC,EACAC,EACAC,EACAC,EACJ,GAAK,UAAU,SAAW,EAEzBA,EAAI,IAAI,KACRF,EAAME,EAAE,SAAS,EAAI,EACrBD,EAAKC,EAAE,YAAY,UACR,UAAU,SAAW,EAChC,GAAKf,EAAcU,CAAM,EACxBK,EAAIL,EACJG,EAAME,EAAE,SAAS,EAAI,EACrBD,EAAKC,EAAE,YAAY,UACRd,EAAUS,CAAM,GAAKR,EAAWQ,CAAM,EAEjDI,EAAKT,EAAY,EACjBQ,EAAMH,MAEN,OAAM,IAAI,UAAWJ,EAAQ,kGAAmGI,CAAM,CAAE,MAEnI,CACN,GAAK,CAACT,EAAUS,CAAM,GAAK,CAACR,EAAWQ,CAAM,EAC5C,MAAM,IAAI,UAAWJ,EAAQ,oFAAqFI,CAAM,CAAE,EAE3H,GAAK,CAACR,EAAWS,CAAK,EACrB,MAAM,IAAI,UAAWL,EAAQ,qEAAsEK,CAAK,CAAE,EAE3GE,EAAMH,EACNI,EAAKH,CACN,CACA,GAAKT,EAAWW,CAAI,IAAMA,EAAM,GAAKA,EAAM,IAC1C,MAAM,IAAI,WAAYP,EAAQ,0FAA2FO,CAAI,CAAE,EAIhI,GAFAA,EAAMV,EAAWU,EAAI,SAAS,CAAE,EAChCD,EAAOJ,EAAkBK,CAAI,EACxBD,IAAS,OACb,MAAM,IAAI,MAAON,EAAQ,kEAAmEO,CAAI,CAAE,EAGnG,OAAKD,IAAS,SAAWR,EAAYU,CAAG,IACvCF,GAAQL,GAEFK,CACR,CAKAb,EAAO,QAAUU,ICrEjB,IAAIO,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_seconds", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "isDateObject", "isString", "isInteger", "lowercase", "isLeapYear", "currentYear", "format", "SECONDS_IN_DAY", "SECONDS_IN_MONTH", "secondsInMonth", "month", "year", "secs", "mon", "yr", "d", "main"]
}
